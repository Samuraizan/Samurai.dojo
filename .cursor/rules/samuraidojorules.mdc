---
description: 
globs: 
---
**    ### **Project Structure**   - Use a **feature-based** folder structure:     - `pages/agents/[id].js` → Dynamic agent pages     - `pages/skills/[id].js` → Dynamic skill pages     - `components/agents/` → Agent-specific components     - `components/skills/` → Skill-specific components     - `components/common/` → Shared UI elements     - `utils/` → API functions, helpers, and data    ### **Dynamic Routing & Data Management**   - **No static pages** for agents/skills; use `[id].js` dynamic routes.   - **Centralized data source** in `utils/data.js` (no hardcoded values).   - **Data-fetching and business logic** handled in `utils/helpers.js`.   - **Use Next.js optimizations** (`getStaticProps`, `getServerSideProps`) for performance.    ### **Componentization & Reusability**   - **No duplicated logic**; reuse components where possible.   - **Minimal JSX in pages**; pages handle data-fetching and layout composition only.   - **Encapsulate UI per feature**; agent components in `components/agents/`, skill components in `components/skills/`.   - **Follow single responsibility**; each component should serve one purpose.    ### **Best Practices & Code Efficiency**   - **SOLID, DRY, KISS principles** must be followed.   - **Strict separation of concerns** between UI, data, and logic.   - **Self-documenting code**; explicit naming, minimal comments.   - **Minimize imports**; import only necessary modules.   - **Pure, stateless components** unless stateful logic is required.   - **No unnecessary re-renders**; optimize with `useMemo`, `useCallback`, and Next.js caching.    ### **Scalability & Maintainability**   - **Adding new agents/skills requires zero core modifications**.   - **Loose coupling**; dependencies interact via well-defined interfaces.   - **No direct data mutations**; state and props should remain immutable.   - **Easy extensibility**; new features should be added without modifying existing logic.   - **Core logic remains stable**; new modules plug into existing patterns.    ### **Expected Outcome**   - **Scalable, maintainable, and modular** architecture.   - **Minimal code duplication** and **maximum reusability**.   - **New agents/skills integrate seamlessly** without modifying core functionality.   - **High performance and clean separation of concerns**.  
